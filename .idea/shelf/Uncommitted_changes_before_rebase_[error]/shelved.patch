Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3e5cfb0c-185d-4495-abfd-0fec09ef3b6c\" name=\"Changes\" comment=\"First commit\">\r\n      <change afterPath=\"$PROJECT_DIR$/Tries.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/player.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/player.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2fQuQtw5u0puhir2rl6Xa0WoNxB\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.Tries.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"Tries\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"paint\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Tries.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"paint\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Tries\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-50da183f06c8-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13135.95\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3e5cfb0c-185d-4495-abfd-0fec09ef3b6c\" name=\"Changes\" comment=\"\" />\r\n      <created>1713745610342</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713745610342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713901021772</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713901021772</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"First commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"First commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c23338ad6c2f3652f7d5786d81440ff228ce800c)
+++ b/.idea/workspace.xml	(date 1715182329001)
@@ -23,7 +23,27 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="PUSH_TAGS">
+      <GitPushTagMode>
+        <option name="argument" value="--tags" />
+        <option name="title" value="All" />
+      </GitPushTagMode>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;milorangel&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">
+    <option name="selectedUrlAndAccountId">
+      <UrlAndAccount>
+        <option name="accountId" value="a59f98ed-a609-4047-9691-7fca1c9495db" />
+        <option name="url" value="https://github.com/milorangel/cavab.git" />
+      </UrlAndAccount>
+    </option>
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 8
@@ -34,15 +54,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.Tries.executor": "Run",
-    "Python.main.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.Tries.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager" selected="Python.main">
     <configuration name="Tries" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="paint" />
@@ -118,7 +138,15 @@
       <option name="project" value="LOCAL" />
       <updated>1713901021772</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="First commit">
+      <option name="closed" value="true" />
+      <created>1713954754744</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1713954754744</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport pygame.time\r\nimport player\r\npygame.init()\r\n\r\nsc_size = 600, 400\r\nsc_center = sc_size[0]/2, sc_size[1]/2\r\nsc = pygame.display.set_mode(sc_size)\r\npygame.display.set_caption(\"ça va b ? ça va bou?\")\r\n\r\nsc.fill(pygame.Color(0,0,0))\r\n\r\ndef main():\r\n\r\n    players =[player.Player(100, 100, sc), player.Player(0, 0, sc, pygame.Color(255, 51, 255), pygame.K_LEFT, pygame.K_RIGHT, pygame.K_UP)]\r\n\r\n    clock = pygame.time.Clock()\r\n\r\n    running = True\r\n    while running:\r\n        clock.tick(60)\r\n\r\n        keys = pygame.key.get_pressed()\r\n        for p in players:\r\n            p.control(keys)\r\n            p.jump(keys)\r\n\r\n\r\n            if not p.players_collisions() :  # Si p.control() renvoie False, la boucle s'arrête\r\n                running = False\r\n                break\r\n\r\n            p.draw()\r\n\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n\r\n        pygame.display.flip()\r\n\r\n    pygame.quit()\r\n\r\nmain()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c23338ad6c2f3652f7d5786d81440ff228ce800c)
+++ b/main.py	(date 1715181723787)
@@ -8,11 +8,11 @@
 sc = pygame.display.set_mode(sc_size)
 pygame.display.set_caption("ça va b ? ça va bou?")
 
-sc.fill(pygame.Color(0,0,0))
+sc.fill('#000000')
 
 def main():
 
-    players =[player.Player(100, 100, sc), player.Player(0, 0, sc, pygame.Color(255, 51, 255), pygame.K_LEFT, pygame.K_RIGHT, pygame.K_UP)]
+    players =[player.Player(100, 100, sc), player.Player(0, 0, sc, 'pink', pygame.K_LEFT, pygame.K_RIGHT, pygame.K_UP)]
 
     clock = pygame.time.Clock()
 
@@ -20,10 +20,8 @@
     while running:
         clock.tick(60)
 
-        keys = pygame.key.get_pressed()
         for p in players:
-            p.control(keys)
-            p.jump(keys)
+            p.control()
 
 
             if not p.players_collisions() :  # Si p.control() renvoie False, la boucle s'arrête
@@ -41,4 +39,5 @@
 
     pygame.quit()
 
-main()
\ No newline at end of file
+main()
+
Index: player.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport math\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    pre_positions = []\r\n    positions = []\r\n    instance_len = 0\r\n    def __init__(self, x, y, surface, color=pygame.Color(0, 0, 255), k_left = pygame.K_q,  k_right = pygame.K_d, k_boost = pygame.K_z):\r\n        super().__init__()\r\n        Player.instance_len += 1\r\n        self.instance_number = Player.instance_len\r\n        print('Player instance:', self.instance_number, '-> init...' )\r\n        self.x = x\r\n        self.y = y\r\n\r\n        self.x_colision = x\r\n        self.y_colision = y\r\n\r\n        self.surface = surface\r\n\r\n        self.speed = 1\r\n        self.angle = self.spawn_angle = 0\r\n        self.angle_force = 0.04\r\n\r\n        self.k_left = k_left\r\n        self.k_right = k_right\r\n        self.k_boost = k_boost\r\n\r\n        self.visible = True\r\n        self.color = color\r\n\r\n        self.k_boost_pressed = False\r\n        self.constant_boost_duration = self.boost_duration = 30\r\n        self.constant_boost_cooldown = self.boost_cooldown = 30\r\n        self.boost_on = False\r\n        self.boost_cooldown_done = True\r\n\r\n    def draw(self):\r\n        if self.visible:\r\n            color = self.color\r\n        else:\r\n            color = pygame.Color(255,255,255)\r\n        pygame.draw.circle(self.surface, (100,100,100), (int(self.x), int(self.y)), 2)\r\n\r\n    def control(self, keys):\r\n\r\n        if keys[self.k_left]:\r\n            self.angle -= self.angle_force\r\n        if keys[self.k_right]:\r\n            self.angle += self.angle_force\r\n\r\n\r\n        dx = self.speed * math.cos(self.angle)\r\n        dy = self.speed * math.sin(self.angle)\r\n\r\n        self.x += dx\r\n        self.y += dy\r\n\r\n\r\n    def players_collisions(self):\r\n        self.x_colision = round(self.x, 0)\r\n        self.y_colision = round(self.y, 0)\r\n\r\n        if any((self.x_colision, self.y_colision) == pos for pos in Player.positions):\r\n            print(False)\r\n            return False\r\n        else:\r\n            Player.pre_positions.append((self.x_colision, self.y_colision))\r\n            if len(Player.pre_positions) > 10:\r\n                Player.positions.append(Player.pre_positions[0])\r\n                Player.pre_positions.remove(Player.pre_positions[0])\r\n            return True\r\n\r\n\r\n    def wall_collisions(self):\r\n        if self.x > self.surface.get_size()[0]:\r\n            return False\r\n\r\n\r\n\r\n    def jump(self, keys):\r\n\r\n        # Si le cooldown du boost est terminé, le joueur peut activer le boost\r\n        if self.boost_cooldown_done:\r\n            if keys[self.k_boost]:\r\n                self.boost_on = True\r\n\r\n        # Si le boost est activé, réduire la durée du boost\r\n        if self.boost_on:\r\n            self.visible = False\r\n            self.boost_duration -= 1\r\n\r\n        # Si la durée du boost est écoulée, désactiver le boost et démarrer le cooldown\r\n        if self.boost_duration < 0:\r\n            self.boost_on = False\r\n            self.boost_cooldown_done = False  # Le cooldown n'est pas encore terminé\r\n            self.boost_cooldown = self.constant_boost_cooldown  # Réinitialiser le cooldown du boost\r\n\r\n        # Si le cooldown du boost est en cours, réduire son temps\r\n        if not self.boost_cooldown_done:\r\n            self.boost_cooldown -= 1\r\n            if self.boost_cooldown <= 0:\r\n                self.boost_cooldown_done = True  # Indiquer que le cooldown est terminé\r\n\r\n        # Réinitialiser le déclencheur du boost après que le cooldown soit terminé\r\n        if self.boost_cooldown_done and not keys[self.k_boost]:\r\n            self.boost_on = False\r\n\r\n        # Rendre le joueur visible si aucune touche de déplacement n'est enfoncée et que le boost n'est pas activé\r\n        if not any([keys[self.k_left], keys[self.k_right]]) and not self.boost_on:\r\n            self.visible = True
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/player.py b/player.py
--- a/player.py	(revision c23338ad6c2f3652f7d5786d81440ff228ce800c)
+++ b/player.py	(date 1715181727859)
@@ -6,17 +6,13 @@
     pre_positions = []
     positions = []
     instance_len = 0
-    def __init__(self, x, y, surface, color=pygame.Color(0, 0, 255), k_left = pygame.K_q,  k_right = pygame.K_d, k_boost = pygame.K_z):
+    def __init__(self, x, y, surface, color='blue', k_left = pygame.K_q,  k_right = pygame.K_d, k_boost = pygame.K_z):
         super().__init__()
         Player.instance_len += 1
         self.instance_number = Player.instance_len
         print('Player instance:', self.instance_number, '-> init...' )
         self.x = x
         self.y = y
-
-        self.x_colision = x
-        self.y_colision = y
-
         self.surface = surface
 
         self.speed = 1
@@ -30,20 +26,21 @@
         self.visible = True
         self.color = color
 
-        self.k_boost_pressed = False
-        self.constant_boost_duration = self.boost_duration = 30
-        self.constant_boost_cooldown = self.boost_cooldown = 30
-        self.boost_on = False
-        self.boost_cooldown_done = True
+        #self.k_boost_pressed = False
+        #self.constant_boost_duration = self.boost_duration = 30
+        #self.constant_boost_cooldown = self.boost_cooldown = 30
+        #self.boost_on = False
+        #self.boost_cooldown_done = True
 
     def draw(self):
         if self.visible:
             color = self.color
         else:
-            color = pygame.Color(255,255,255)
-        pygame.draw.circle(self.surface, (100,100,100), (int(self.x), int(self.y)), 2)
+            color = 'white'
+        pygame.draw.circle(self.surface, color, (self.x, self.y), 2)
 
-    def control(self, keys):
+    def control(self):
+        keys = pygame.key.get_pressed()
 
         if keys[self.k_left]:
             self.angle -= self.angle_force
@@ -59,27 +56,37 @@
 
 
     def players_collisions(self):
-        self.x_colision = round(self.x, 0)
-        self.y_colision = round(self.y, 0)
+        self.x = round(self.x, 0)
+        self.y = round(self.y, 0)
 
-        if any((self.x_colision, self.y_colision) == pos for pos in Player.positions):
+        if any((self.x, self.y) == pos for pos in Player.positions):
             print(False)
             return False
         else:
-            Player.pre_positions.append((self.x_colision, self.y_colision))
+            Player.pre_positions.append((self.x, self.y))
             if len(Player.pre_positions) > 10:
                 Player.positions.append(Player.pre_positions[0])
                 Player.pre_positions.remove(Player.pre_positions[0])
             return True
-
-
     def wall_collisions(self):
         if self.x > self.surface.get_size()[0]:
             return False
 
+        # --------------------------------------------------------------------------
+        #player_rect = pygame.Rect(self.x, self.y, 1, 1)
+        #for pos in Player.positions:
+        #    pos_rect = pygame.Rect(pos[0], pos[1], 1, 1)
+        #    if player_rect.colliderect(pos_rect):
+        #        print("Collision detected!")
+        #        return False
+        # -------------------------------------------------------------------
+        # if surface.get_at((int(self.x), int(self.y))) != '#000000':
+        #    return False
+        # return True
 
 
-    def jump(self, keys):
+    def jump(self):
+        keys = pygame.key.get_pressed()
 
         # Si le cooldown du boost est terminé, le joueur peut activer le boost
         if self.boost_cooldown_done:
@@ -109,4 +116,5 @@
 
         # Rendre le joueur visible si aucune touche de déplacement n'est enfoncée et que le boost n'est pas activé
         if not any([keys[self.k_left], keys[self.k_right]]) and not self.boost_on:
-            self.visible = True
\ No newline at end of file
+            self.visible = True
+
